import React, { useEffect, useState } from 'react';
import { useAppDispatch, useAppSelector } from './hooks/redux';
import {
  fetchProducts,
  addProductAsync,
  updateProductAsync,
  deleteProductAsync,
  setFilter,
  selectFilteredProducts,
  selectProductsLoading,
  selectProductsError,
  selectProductsFilter,
  selectCategories,
  selectProductsCache,
  clearError,
} from './store/slices/productsSlice';
import { selectIsDarkMode } from './store/slices/themeSlice';
import ProductCard from './components/ProductCard/ProductCard';
import ProductForm from './components/ProductForm/ProductForm';
import ProductFilters from './components/ProductFilters/ProductFilters';
import ThemeToggle from './components/ThemeToggle/ThemeToggle';
import LoadingSpinner from './components/LoadingSpinner/LoadingSpinner';
import './App.css';

function App() {
  const dispatch = useAppDispatch();
  const products = useAppSelector(selectFilteredProducts);
  const loading = useAppSelector(selectProductsLoading);
  const error = useAppSelector(selectProductsError);
  const filter = useAppSelector(selectProductsFilter);
  const categories = useAppSelector(selectCategories);
  const cache = useAppSelector(selectProductsCache);
  const isDarkMode = useAppSelector(selectIsDarkMode);

  const [showForm, setShowForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);

  useEffect(() => {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');
  }, [isDarkMode]);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
    const shouldFetch = !cache.lastFetch || 
      (Date.now() - cache.lastFetch > cache.ttl);
    
    if (shouldFetch) {
      dispatch(fetchProducts());
    }
  }, [dispatch, cache]);

  const handleAddProduct = () => {
    setEditingProduct(null);
    setShowForm(true);
  };

  const handleEditProduct = (product) => {
    setEditingProduct(product);
    setShowForm(true);
  };

  const handleDeleteProduct = async (productId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
      try {
        await dispatch(deleteProductAsync(productId)).unwrap();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      }
    }
  };

  const handleFormSubmit = async (productData) => {
    try {
      if (editingProduct) {
        await dispatch(updateProductAsync(productData)).unwrap();
      } else {
        await dispatch(addProductAsync(productData)).unwrap();
      }
      setShowForm(false);
      setEditingProduct(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    }
  };

  const handleFormCancel = () => {
    setShowForm(false);
    setEditingProduct(null);
  };

  const handleFilterChange = (newFilter) => {
    dispatch(setFilter(newFilter));
  };

  const handleClearFilters = () => {
    dispatch(setFilter({
      category: 'all',
      searchTerm: '',
      sortBy: 'name',
      sortOrder: 'asc',
    }));
  };

  const handleClearError = () => {
    dispatch(clearError());
  };

  return (
    <div className="app">
      <header className="app-header">
        <div className="header-content">
          <div className="header-left">
            <h1 className="app-title">–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</h1>
            <p className="app-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ —Å Redux</p>
          </div>
          <div className="header-right">
            <ThemeToggle />
            <button 
              className="btn btn-primary add-product-btn"
              onClick={handleAddProduct}
            >
              + –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
            </button>
          </div>
        </div>
      </header>

      <main className="app-main">
        <div className="container">
          {error && (
            <div className="error-banner">
              <span>–û—à–∏–±–∫–∞: {error}</span>
              <button onClick={handleClearError} className="error-close">√ó</button>
            </div>
          )}

          <ProductFilters
            filter={filter}
            categories={categories}
            onFilterChange={handleFilterChange}
            onClearFilters={handleClearFilters}
          />

          {loading && products.length === 0 ? (
            <LoadingSpinner size="large" text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤..." />
          ) : (
            <>
              <div className="products-header">
                <h2>–¢–æ–≤–∞—Ä—ã ({products.length})</h2>
                {loading && (
                  <div className="inline-loading">
                    <LoadingSpinner size="small" text="" />
                  </div>
                )}
              </div>

              {products.length === 0 ? (
                <div className="empty-state">
                  <div className="empty-icon">üì¶</div>
                  <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä</p>
                  <button 
                    className="btn btn-primary"
                    onClick={handleAddProduct}
                  >
                    –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
                  </button>
                </div>
              ) : (
                <div className="products-grid">
                  {products.map(product => (
                    <ProductCard
                      key={product.id}
                      product={product}
                      onEdit={handleEditProduct}
                      onDelete={handleDeleteProduct}
                    />
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      </main>

      {showForm && (
        <ProductForm
          product={editingProduct}
          onSubmit={handleFormSubmit}
          onCancel={handleFormCancel}
          isLoading={loading}
        />
      )}
    </div>
  );
}

export default App;
